{"version":3,"sources":["types.ts","parseRawGraph.ts","github.svg","wiking.svg","home.svg","Atoms.tsx","ExpandingTextarea.tsx","NetworkGraph.tsx","Paths.tsx","RedBlueGraph.tsx","index.tsx"],"names":["Color","r","String","raw","reNode","rePath","reSep","re","RegExp","trim","s","uniq","list","Array","from","Set","Center","styled","div","H2","h1","wiking","h2","Flex","Result","TextareaContainer","props","targetHeight","StyledTextarea","textarea","Textarea","attrs","spellCheck","TextareaClone","cssColor","ul","BLUE","RED","IconLink","li","nodeColor","svg","a","github","home","ExpandingTextarea","onChange","placeholder","useState","height","setHeight","textareaClone","useRef","ref","event","current","value","target","Math","max","scrollHeight","GraphContainer","isEdgeProcessed","nodeId","linkedNodeId","edgeIds","has","NetworkGraph","graph","onNodeSelected","container","useEffect","data","getId","id","idGetter","entries","reduce","nodes","labelMap","node","linkedNodes","newNodes","filter","label","map","set","color","random","Map","rawNodes","rawEdges","edges","get","newEdges","linkedNode","add","to","DataSet","getNodesAndEdges","Network","shape","font","size","face","smooth","interaction","selectConnectedEdges","zoomView","physics","enabled","on","e","List","Path","Paths","paths","path","join","getDFSPaths","result","newPath","children","child","includes","length","push","forEach","getBFSPaths","labels","visited","nextStep","RedBlueGraph","setGraph","entryPoint","bfsPaths","dfsPaths","setState","useCallback","rawGraph","match","exec","split","zip","slice","source","parseRawGraph","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34a88958.chunk.js","sourcesContent":["export enum Color {\n  RED = 1,\n  BLUE,\n}\nexport type Vertex = string;\nexport type Graph = Map<Vertex, Vertex[]>;\nexport type ColorMap = Map<Vertex, Color>;\n","import { Graph } from \"./types\";\nimport zip from \"lodash/zip\";\n\nconst r = String.raw;\nconst reNode = r` *[a-zA-Z0-9]+(?: +[a-zA-Z0-9]+)* *`;\nconst rePath = r`${reNode}(?:-${reNode})+`;\nconst reSep = r`(?:[,\\n]+)`;\nconst re = new RegExp(r`(?:${reSep})?(${rePath})`, \"gy\");\nconst trim = (s: string) => s.trim();\nconst uniq = <T>(list: T[]) => Array.from(new Set(list));\n\nexport const parseRawGraph = (rawGraph: string) => {\n  const graph: Graph = new Map();\n  while (true) {\n    const match = re.exec(rawGraph);\n    if (!match) break;\n    const path = match[1].split(\"-\").map(trim);\n    const pairs = zip(path.slice(0, -1), path.slice(1));\n    pairs.forEach(([source, target]) => {\n      graph.set(source!, uniq([...(graph.get(source!) || []), target!]));\n      graph.set(target!, uniq([...(graph.get(target!) || []), source!]));\n    });\n  }\n  return graph;\n};\n","export default __webpack_public_path__ + \"static/media/github.a407ddf3.svg\";","export default __webpack_public_path__ + \"static/media/wiking.3ccb519e.svg\";","export default __webpack_public_path__ + \"static/media/home.f04645e1.svg\";","import styled from 'styled-components';\nimport { Color } from './types';\nimport github from './github.svg';\nimport wiking from './wiking.svg';\nimport home from './home.svg';\n\nexport const Center = styled.div`\n  align-items: center;\n  background-color: rgb(248, 240, 231);\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  min-height: 100%;\n  padding: 50px 0;\n  &::after {\n    content: '';\n    flex: 1;\n  }\n`;\n\nexport const H1 = styled.h1`\n  color: hsla(0, 0%, 0%, 0.33);\n  background-image: url(${wiking});\n  background-position: 50% 8px;\n  background-repeat: no-repeat;\n  background-size: 48px;\n  font: inherit;\n  font-size: 5.5vh;\n  margin: 0;\n  padding: 80px 0 0 0;\n`;\n\nexport const H2 = styled.h2`\n  font: inherit;\n  font-size: 24px;\n  margin: 36px 0 24px 0;\n  padding: 0;\n`;\n\nexport const Flex = styled.div`\n  display: flex;\n`;\n\nexport const Result = styled.div`\n  padding: 20px;\n  min-width: 500px;\n`;\n\nexport const PLACEHODER_TEXT = `v 1 - v 2 - v 3,\nv 3 - v 4`;\nexport const TEXTAREA_PADDING = 12;\nexport const TEXTAREA_HEIGHT = 56;\n\nexport const TextareaContainer = styled.div<{ targetHeight: number }>`\n  display: flex;\n  flex-direction: row;\n  margin-top: -12px;\n  & > span {\n    font-size: ${(props) => props.targetHeight}px;\n    height: ${(props) => props.targetHeight}px;\n    line-height: ${(props) => props.targetHeight * 0.91}px;\n    padding: ${TEXTAREA_PADDING}px 0;\n  }\n`;\n\nconst StyledTextarea = styled.textarea<{ targetHeight?: number }>``;\nexport const Textarea = styled(StyledTextarea).attrs({\n  spellCheck: false,\n})`\n  background-color: transparent;\n  border: 0px solid hsl(0, 0%, 85%);\n  font: inherit;\n  font-size: 20px;\n  height: ${(props) => props.targetHeight}px;\n  overflow: hidden;\n  padding: ${TEXTAREA_PADDING}px;\n  resize: none;\n  width: 300px;\n  &:active,\n  &:focus {\n    outline: none;\n  }\n  &::placeholder {\n    color: hsl(0, 0%, 50%);\n    opacity: 0;\n    transition: opacity 0.3s;\n  }\n  &:active::placeholder,\n  &:focus::placeholder {\n    opacity: 1;\n  }\n`;\n\nexport const TextareaClone = styled(Textarea)`\n  position: absolute;\n  pointer-events: none;\n  opacity: 0;\n`;\n\nexport const BipartiteGraph = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nexport const NodeList = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n\nconst cssColor = {\n  [Color.BLUE]: 'hsl(220, 100%, 70%)',\n  [Color.RED]: 'hsl(15, 100%, 65%)',\n};\n\nexport const Node = styled.li<{ nodeColor: Color }>`\n  background-color: ${(props) => cssColor[props.nodeColor]};\n  border-radius: 16px;\n  color: white;\n  font-size: 24px;\n  height: 32px;\n  line-height: 32px;\n  margin: 0 0 16px 0;\n  padding: 0 16px;\n  text-align: center;\n  position: relative;\n  z-index: 1;\n`;\n\nexport const Svg = styled.svg`\n  margin: 0 -24px;\n`;\n\nexport const Error = styled(H2)`\n  color: red;\n`;\n\nexport const Navigation = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  margin-top: 48px;\n  order: 3;\n  width: 232px;\n`;\n\nexport const IconLink = styled.a`\n  background-repeat: no-repeat;\n  background-position: 0 50%;\n  background-size: 20px;\n  padding-left: 32px;\n  height: 24px;\n  line-height: 24px;\n  text-decoration: none;\n  cursor: pointer;\n  color: inherit;\n  &::visited,\n  &:-webkit-any-link {\n    color: inherit;\n  }\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nexport const RepoLink = styled(IconLink)`\n  background-image: url(${github});\n`;\n\nexport const HomeLink = styled(IconLink)`\n  background-image: url(${home});\n`;\n","import React, { useRef, useState } from \"react\";\nimport {\n  Textarea,\n  TextareaClone,\n  TEXTAREA_PADDING,\n  TEXTAREA_HEIGHT,\n  TextareaContainer,\n} from \"./Atoms\";\n\nexport const ExpandingTextarea = ({\n  onChange,\n  placeholder,\n}: {\n  onChange: React.ChangeEventHandler<HTMLTextAreaElement>;\n  placeholder: string;\n}) => {\n  const [height, setHeight] = useState<number>(TEXTAREA_HEIGHT);\n  const textareaClone = useRef<HTMLTextAreaElement>(null);\n\n  const onChangeInner: React.ChangeEventHandler<HTMLTextAreaElement> = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    onChange(event);\n    if (!textareaClone.current) {\n      return;\n    }\n    textareaClone.current.value = event.target.value;\n    const targetHeight = Math.max(\n      textareaClone.current.scrollHeight - 2 * TEXTAREA_PADDING,\n      TEXTAREA_HEIGHT\n    );\n    if (targetHeight !== height) {\n      setHeight(targetHeight);\n    }\n  };\n\n  return (\n    <>\n      <TextareaClone ref={textareaClone} />\n      <TextareaContainer targetHeight={height}>\n        <span>{\"{\"}</span>\n        <Textarea\n          onChange={onChangeInner}\n          placeholder={placeholder}\n          targetHeight={height}\n        />\n        <span>{\"}\"}</span>\n      </TextareaContainer>\n    </>\n  );\n};\n","import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { DataSet } from 'vis-data';\nimport { Network } from 'vis-network';\n\nconst GraphContainer = styled.div`\n  width: 500px;\n  height: 500px;\n`;\n\nconst idGetter = () => {\n  let id = 1;\n  return () => id++;\n};\n\ntype RawNode = {\n  id: number;\n  label: string;\n  color: string;\n};\n\ntype RawEdge = {\n  from: number;\n  to: number;\n  color: string;\n  id: number;\n};\n\ntype Graph = Map<string, string[]>;\n\nconst getNodesAndEdges = (graph: Graph) => {\n  const getId = idGetter();\n\n  const { nodes: rawNodes, labelMap } = Array.from(graph.entries()).reduce(\n    ({ nodes, labelMap }, [node, linkedNodes]) => {\n      const newNodes = [node, ...linkedNodes]\n        .filter((label) => !labelMap.has(label))\n        .map((label) => {\n          const id = getId();\n          labelMap.set(label, id);\n          return {\n            id,\n            label,\n            color: `hsl(${(Math.random() * 360) | 0}, 100%, 85%)`,\n          };\n        });\n\n      return { nodes: [...nodes, ...newNodes], labelMap };\n    },\n    { nodes: [], labelMap: new Map() } as {\n      nodes: RawNode[];\n      labelMap: Map<string, number>;\n    }\n  );\n\n  const { edges: rawEdges } = Array.from(graph.entries()).reduce(\n    ({ edges, edgeIds }, [node, linkedNodes]) => {\n      const nodeId = labelMap.get(node)!;\n      const newEdges = linkedNodes\n        .filter((linkedNode) => {\n          const linkedNodeId = labelMap.get(linkedNode)!;\n          return !isEdgeProcessed(nodeId, linkedNodeId, edgeIds);\n        })\n        .map((linkedNode) => {\n          const linkedNodeId = labelMap.get(linkedNode)!;\n          edgeIds.add(`${nodeId}-${linkedNodeId}`);\n          return {\n            from: nodeId,\n            to: linkedNodeId,\n            color: 'black',\n            id: getId(),\n          };\n        });\n      return { edges: [...edges, ...newEdges], edgeIds };\n    },\n    {\n      edges: [],\n      edgeIds: new Set(),\n    } as {\n      edges: RawEdge[];\n      edgeIds: Set<string>;\n    }\n  );\n\n  const nodes = new DataSet(rawNodes);\n  const edges = new DataSet(rawEdges);\n\n  return { nodes, edges, rawNodes };\n};\n\nconst isEdgeProcessed = (\n  nodeId: number,\n  linkedNodeId: number,\n  edgeIds: Set<string>\n) =>\n  edgeIds.has(`${nodeId}-${linkedNodeId}`) ||\n  edgeIds.has(`${linkedNodeId}-${nodeId}`);\n\ntype NetworkGraphProps = {\n  graph: Graph;\n  onNodeSelected: (label: string) => void;\n};\n\nconst NetworkGraph = ({ graph, onNodeSelected }: NetworkGraphProps) => {\n  const container = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    const data = getNodesAndEdges(graph);\n    const map = new Map(data.rawNodes.map((node) => [node.id, node]));\n    const options = {\n      nodes: {\n        shape: 'circle',\n        font: {\n          size: 20,\n          face: 'Roboto Mono',\n        },\n      },\n      edges: {\n        smooth: false,\n      },\n      interaction: {\n        selectConnectedEdges: false,\n        zoomView: false,\n      },\n      physics: {\n        enabled: false,\n      },\n    };\n    const network = new Network(container.current!, data, options);\n    network.on('click', (e) => {\n      const node = map.get(e.nodes[0]);\n      if (node) onNodeSelected(node.label);\n    });\n  }, [graph, onNodeSelected]);\n\n  return <GraphContainer ref={container} />;\n};\n\nexport default NetworkGraph;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst List = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  font-size: 20px;\n`;\n\nconst Path = styled.li``;\n\ntype PathsProps = {\n  paths: string[][];\n};\nconst Paths = ({ paths }: PathsProps) => {\n  return (\n    <List>\n      {paths.map((path) => (\n        <Path>{path.join(' - ')}</Path>\n      ))}\n    </List>\n  );\n};\n\nexport default Paths;\n","import React, { useCallback, useState } from \"react\";\nimport { Graph } from \"./types\";\nimport { parseRawGraph } from \"./parseRawGraph\";\nimport { Center, H2, PLACEHODER_TEXT, Flex, Result } from \"./Atoms\";\nimport { ExpandingTextarea } from \"./ExpandingTextarea\";\nimport NetworkGraph from \"./NetworkGraph\";\nimport Paths from \"./Paths\";\n\nconst getDFSPaths = (\n  graph: Graph,\n  label: string,\n  path: string[] = [],\n  result: string[][] = []\n) => {\n  const newPath = [...path, label];\n  const children = (graph.get(label) || []).filter(\n    (child) => !path.includes(child)\n  );\n  if (children.length === 0) {\n    result.push(newPath);\n    return result;\n  }\n  children.forEach((child) => getDFSPaths(graph, child, newPath, result));\n  return result;\n};\n\ntype Path = string[];\n\nconst getBFSPaths = (\n  graph: Graph,\n  labels: [string, Path][],\n  visited: Set<string> = new Set(),\n  result: Path[] = []\n) => {\n  const nextStep: [string, Path][] = [];\n  labels.forEach(([label, path]) => {\n    const newPath = [...path, label];\n\n    const children = visited.has(label)\n      ? []\n      : (graph.get(label) || []).filter((child) => !visited.has(child));\n\n    if (children.length === 0) {\n      result.push(newPath);\n      return;\n    }\n\n    children.forEach((child) => {\n      nextStep.push([child, newPath]);\n    });\n  });\n\n  labels.forEach(([label]) => visited.add(label));\n\n  if (nextStep.length > 0) getBFSPaths(graph, nextStep, visited, result);\n\n  return result;\n};\n\nconst RedBlueGraph = () => {\n  const [graph, setGraph] = useState<Graph>(new Map());\n\n  const [{ entryPoint, bfsPaths, dfsPaths }, setState] = useState<{\n    entryPoint: string;\n    bfsPaths: Path[];\n    dfsPaths: Path[];\n  }>({ entryPoint: \"\", bfsPaths: [], dfsPaths: [] });\n\n  const onNodeSelected = useCallback(\n    (label) => {\n      const dfsPaths = getDFSPaths(graph, label);\n      const bfsPaths = getBFSPaths(graph, [[label, []]]);\n      setState({ entryPoint: label, dfsPaths, bfsPaths });\n      setState({ entryPoint: label, dfsPaths, bfsPaths });\n    },\n    [graph, setState]\n  );\n\n  return (\n    <Center>\n      <H2>enter some paths</H2>\n      <ExpandingTextarea\n        onChange={(event) => {\n          const graph = parseRawGraph(event.target.value);\n          setGraph(graph);\n        }}\n        placeholder={PLACEHODER_TEXT}\n      ></ExpandingTextarea>\n      {graph.size > 0 && (\n        <Flex>\n          <NetworkGraph graph={graph} onNodeSelected={onNodeSelected} />\n          <Result>\n            <H2>entry point: {entryPoint}</H2>\n            <H2>Paths with DFS</H2>\n            <Paths paths={dfsPaths} />\n            <H2>Paths with BFS</H2>\n            <Paths paths={bfsPaths} />\n          </Result>\n        </Flex>\n      )}\n    </Center>\n  );\n};\n\nexport default RedBlueGraph;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport RedBlueGraph from \"./RedBlueGraph\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RedBlueGraph />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}